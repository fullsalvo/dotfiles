#!/usr/bin/env python3

import i3ipc

# Create the Connection object that can be used to send commands and subscribe
# to events.
i3 = i3ipc.Connection()
coloractive = '%{F#eeeeee}'
colorinactive = '%{F#5c5c5c}'
symbols = ['ï††']*5

workspace_string = '  '
workspaces = i3.get_workspaces()

ws_nums = []

for n in workspaces:
    ws = eval(str(n))
    if ws['visible'] == True:
        focused = int(ws['num'])
    ws = int(ws['num'])
    ws_nums.append(ws)

for n in ws_nums:
    if focused == n:
        workspace_string += coloractive + symbols[n-1] + '  '
    else:
        workspace_string += colorinactive + symbols[n-1] + '  '

workspace_string += '  '
print(workspace_string, flush=True)

# Define a callback to be called when you switch workspaces.
def on_workspace_focus(self, e):
    workspace_string = '  '
    workspaces = i3.get_workspaces()

    ws_nums = []

    # Retreive the relevant information from the dicts
    for n in workspaces:
        ws = eval(str(n))
        if ws['visible'] == True:
            focused = int(ws['num'])
        ws = int(ws['num'])
        ws_nums.append(ws)

    for n in ws_nums:
        if focused == n:
            workspace_string += coloractive + symbols[n-1] + '  '
        else:
            workspace_string += colorinactive + symbols[n-1] + '  '

    workspace_string += '  '
    print(workspace_string, flush=True)

# Subscribe to events
i3.on('workspace::focus', on_workspace_focus)

# Start the main loop and wait for events to come in.
i3.main()
